import { supabase } from './config.js';

let currentUser = null;
let currentPage = 0;
const PROFILES_PER_PAGE = 10;
let isLoading = false;
let hasMoreProfiles = true;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
async function initializeFeed() {
    try {
        const { data: { user }, error } = await supabase.auth.getUser();
        if (error) throw error;

        if (!user) {
            window.location.href = 'login.html';
            return;
        }

        currentUser = user;
        console.log('DOM –≥–æ—Ç–æ–≤–∏–π, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é...');
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∞–π–∫—ñ–≤
        subscribeToLikeNotifications();
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ
        await loadProfiles();
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Å–∫—Ä–æ–ª
        setupInfiniteScroll();
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    }
}

// –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ª–∞–π–∫–∏
async function subscribeToLikeNotifications() {
    console.log('–ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∞–π–∫—ñ–≤...');
    console.log('–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:', currentUser);
    
    try {
        const subscription = supabase
            .channel('likes-channel')
            .on(
                'postgres_changes',
                {
                    event: 'INSERT',
                    schema: 'public',
                    table: 'likes'
                },
                async (payload) => {
                    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é INSERT –¥–ª—è –ª–∞–π–∫—ñ–≤:', payload);
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ª–∞–π–∫ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    if (payload.new && payload.new.profile_id === currentUser.id) {
                        console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π –ª–∞–π–∫ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                        await handleNewLike(payload.new);
                    }
                }
            )
            .on(
                'postgres_changes',
                {
                    event: 'UPDATE',
                    schema: 'public',
                    table: 'likes'
                },
                async (payload) => {
                    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é UPDATE –¥–ª—è –ª–∞–π–∫—ñ–≤:', payload);
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞—à–æ–≥–æ –ª–∞–π–∫—É
                    if (payload.new) {
                        // –Ø–∫—â–æ –º–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á –ª–∞–π–∫—É —ñ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–π–Ω—è—Ç–æ
                        if (payload.new.profile_id === currentUser.id && payload.new.status === 'accepted') {
                            console.log('–í–∞—à –ª–∞–π–∫ –±—É–≤ –ø—Ä–∏–π–Ω—è—Ç–∏–π!');
                            const { data: likerProfile } = await supabase
                                .from('profiles')
                                .select('*')
                                .eq('id', payload.new.user_id)
                                .single();
                                
                            if (likerProfile) {
                                showContactsModal(likerProfile);
                            }
                        }
                        // –Ø–∫—â–æ –º–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ –ª–∞–π–∫—É —ñ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–π–Ω—è—Ç–æ
                        else if (payload.new.user_id === currentUser.id && payload.new.status === 'accepted') {
                            console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–π–Ω—è–≤ –≤–∞—à –ª–∞–π–∫!');
                            const { data: profile } = await supabase
                                .from('profiles')
                                .select('*')
                                .eq('id', payload.new.profile_id)
                                .single();
                                
                            if (profile) {
                                showContactsModal(profile);
                            }
                        }
                    }
                }
            )
            .subscribe((status) => {
                console.log('–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ª–∞–π–∫–∏:', status);
            });

        console.log('–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞:', subscription);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:', error);
    }
}

// –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ª–∞–π–∫—É
async function handleNewLike(like) {
    try {
        console.log('–û–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤–∏–π –ª–∞–π–∫:', like);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫
        const { data: likerProfile, error: profileError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', like.user_id)
            .single();

        if (profileError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫:', profileError);
            return;
        }

        console.log('–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫:', likerProfile);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫
        const { data: mutualLike, error: mutualError } = await supabase
            .from('likes')
            .select('*')
            .eq('user_id', currentUser.id)
            .eq('profile_id', like.user_id)
            .eq('status', 'pending')
            .maybeSingle();

        if (mutualError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É:', mutualError);
            return;
        }

        console.log('–í–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫:', mutualLike);

        if (mutualLike) {
            console.log('–¶–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫! –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è...');
            showLikeRequestModal(likerProfile);
        } else {
            console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π –ª–∞–π–∫');
            // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—Ä–æ –Ω–æ–≤–∏–π –ª–∞–π–∫
            const notification = `${likerProfile.name} –≤–ø–æ–¥–æ–±–∞–≤(–ª–∞) –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å!`;
            alert(notification);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ –ª–∞–π–∫—É:', error);
    }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é
function showLikeRequestModal(likerProfile) {
    const modalHTML = `
        <div class="like-request-modal">
            <div class="like-request-content">
                <h2>–í–∑–∞—î–º–Ω–∞ —Å–∏–º–ø–∞—Ç—ñ—è! üíï</h2>
                <p>–í–∏ —Å–ø–æ–¥–æ–±–∞–ª–∏—Å—å –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${likerProfile.name}!</p>
                <p>–•–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏?</p>
                <div class="like-request-buttons">
                    <button onclick="handleLikeResponse('${likerProfile.id}', true)" class="accept-like">
                        –¢–∞–∫, –æ–±–º—ñ–Ω—è—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
                    </button>
                    <button onclick="handleLikeResponse('${likerProfile.id}', false)" class="reject-like">
                        –ù—ñ, –¥—è–∫—É—é
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ª–∞–π–∫
window.handleLikeResponse = async (likerId, accepted) => {
    try {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ª–∞–π–∫—É
        const { error: updateError } = await supabase
            .from('likes')
            .update({ 
                status: accepted ? 'accepted' : 'declined' 
            })
            .eq('user_id', likerId)
            .eq('profile_id', currentUser.id);

        if (updateError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É:', updateError);
            throw updateError;
        }

        if (accepted) {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ –æ–±–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            const [{ data: likerProfile }, { data: myProfile }] = await Promise.all([
                supabase.from('profiles').select('*').eq('id', likerId).single(),
                supabase.from('profiles').select('*').eq('id', currentUser.id).single()
            ]);

            if (!likerProfile || !myProfile) {
                throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏
            showContactsModal(likerProfile, myProfile);
        }

        // –í –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.querySelector('.like-request-modal');
        if (modal) {
            modal.remove();
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ª–∞–π–∫:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫—ñ–≤
window.toggleLike = async (profileId, event) => {
    if (event) {
        event.stopPropagation();
    }
    
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ª–∞–π–∫–∞—î–º–æ —Å–∞–º—ñ —Å–µ–±–µ
        if (profileId === currentUser.id) {
            console.log('–ù–µ –º–æ–∂–Ω–∞ –ª–∞–π–∫–∞—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ');
            return;
        }

        const likeButton = document.querySelector(`[onclick="toggleLike('${profileId}', event)"]`);
        if (likeButton) {
            likeButton.disabled = true;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –ª–∞–π–∫
        const { data: existingLike, error: likeError } = await supabase
            .from('likes')
            .select('*')
            .eq('user_id', currentUser.id)
            .eq('profile_id', profileId)
            .maybeSingle();

        if (likeError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ª–∞–π–∫—É:', likeError);
            throw likeError;
        }

        if (existingLike) {
            console.log('–õ–∞–π–∫ –≤–∂–µ —ñ—Å–Ω—É—î');
            if (likeButton) {
                likeButton.disabled = false;
                likeButton.classList.add('liked');
                likeButton.innerHTML = '<i class="fas fa-heart"></i> –í–ø–æ–¥–æ–±–∞–Ω–æ';
            }
            return;
        }

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ª–∞–π–∫
        const { error: insertError } = await supabase
            .from('likes')
            .insert([
                {
                    user_id: currentUser.id,
                    profile_id: profileId,
                    status: 'pending'
                }
            ]);

        if (insertError) throw insertError;

        // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const { data: myProfile, error: profileError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', currentUser.id)
            .single();

        if (profileError) throw profileError;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –ª–∞–π–∫—É
        const { error: messageError } = await supabase
            .from('messages')
            .insert([
                {
                    sender_id: currentUser.id,
                    receiver_id: profileId,
                    content: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–ø–æ–¥–æ–±–∞–≤ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å`,
                    created_at: new Date().toISOString()
                }
            ]);

        if (messageError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', messageError);
            // –ù–µ –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ª–∞–π–∫—ñ–≤
        }

        if (likeButton) {
            likeButton.disabled = false;
            likeButton.classList.add('liked');
            likeButton.innerHTML = '<i class="fas fa-heart"></i> –í–ø–æ–¥–æ–±–∞–Ω–æ';
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ª–∞–π–∫—É:', error);
    } finally {
        const likeButton = document.querySelector(`[onclick="toggleLike('${profileId}', event)"]`);
        if (likeButton) {
            likeButton.disabled = false;
        }
    }
};

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
function showContactsModal(likerProfile, myProfile) {
    const modalHTML = `
        <div class="contacts-modal">
            <div class="contacts-content">
                <h2>–û–±–º—ñ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</h2>
                <div class="profiles-contacts">
                    <div class="profile-contacts">
                        <h3>${likerProfile.name}</h3>
                        <div class="contact-links">
                            ${likerProfile.telegram ? `
                                <a href="https://t.me/${likerProfile.telegram}" target="_blank" class="contact-link telegram">
                                    <i class="fab fa-telegram"></i> Telegram
                                </a>
                            ` : ''}
                            ${likerProfile.instagram ? `
                                <a href="https://instagram.com/${likerProfile.instagram}" target="_blank" class="contact-link instagram">
                                    <i class="fab fa-instagram"></i> Instagram
                                </a>
                            ` : ''}
                            ${likerProfile.facebook ? `
                                <a href="https://facebook.com/${likerProfile.facebook}" target="_blank" class="contact-link facebook">
                                    <i class="fab fa-facebook"></i> Facebook
                                </a>
                            ` : ''}
                        </div>
                    </div>
                    <div class="profile-contacts">
                        <h3>–í–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏</h3>
                        <div class="contact-links">
                            ${myProfile.telegram ? `
                                <a href="https://t.me/${myProfile.telegram}" target="_blank" class="contact-link telegram">
                                    <i class="fab fa-telegram"></i> Telegram
                                </a>
                            ` : ''}
                            ${myProfile.instagram ? `
                                <a href="https://instagram.com/${myProfile.instagram}" target="_blank" class="contact-link instagram">
                                    <i class="fab fa-instagram"></i> Instagram
                                </a>
                            ` : ''}
                            ${myProfile.facebook ? `
                                <a href="https://facebook.com/${myProfile.facebook}" target="_blank" class="contact-link facebook">
                                    <i class="fab fa-facebook"></i> Facebook
                                </a>
                            ` : ''}
                        </div>
                    </div>
                </div>
                <button onclick="closeContactsModal()" class="close-contacts">
                    <i class="fas fa-times"></i> –ó–∞–∫—Ä–∏—Ç–∏
                </button>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
window.closeContactsModal = () => {
    const modal = document.querySelector('.contacts-modal');
    if (modal) {
        modal.remove();
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–µ—Ä–∏–Ω–≥—É –¥–æ–¥–∞—Ç–∫—É
window.shareApp = () => {
    if (navigator.share) {
        navigator.share({
            title: 'SparkME',
            text: '–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ SparkME - –∑–Ω–∞—Ö–æ–¥—å –Ω–æ–≤–∏—Ö –¥—Ä—É–∑—ñ–≤ —Ç–∞ —Å–ø—ñ–ª–∫—É–π—Å—è!',
            url: window.location.origin
        }).catch(console.error);
    } else {
        // –Ø–∫—â–æ API —à–µ—Ä–∏–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –∫–æ–ø—ñ—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
        const dummy = document.createElement('input');
        document.body.appendChild(dummy);
        dummy.value = window.location.origin;
        dummy.select();
        document.execCommand('copy');
        document.body.removeChild(dummy);
        alert('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–∏–º –∑ –¥—Ä—É–∑—è–º–∏ üòä');
    }
};

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
async function loadProfiles() {
    if (isLoading || !hasMoreProfiles) return;

    try {
        isLoading = true;
        const loader = document.getElementById('profilesLoader');
        if (loader) loader.style.display = 'flex';

        // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∂–µ –ª–∞–π–∫–Ω—É—Ç—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
        const { data: likedProfiles } = await supabase
            .from('likes')
            .select('profile_id')
            .eq('user_id', currentUser.id);

        const likedProfileIds = new Set(likedProfiles?.map(like => like.profile_id) || []);

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
        const { data: profiles, error } = await supabase
            .from('profiles')
            .select('*')
            .neq('id', currentUser.id)
            .range(currentPage * PROFILES_PER_PAGE, (currentPage + 1) * PROFILES_PER_PAGE - 1)
            .order('created_at', { ascending: false });

        if (error) throw error;

        if (!profiles || profiles.length === 0) {
            hasMoreProfiles = false;
            if (currentPage === 0) {
                const container = document.getElementById('profilesContainer');
                if (container) {
                    container.innerHTML = `
                        <div class="no-profiles">
                            <i class="fas fa-user-friends"></i>
                            <h3>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç</h3>
                            <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ</p>
                        </div>
                    `;
                }
            }
            return;
        }

        const container = document.getElementById('profilesContainer');
        if (!container) return;

        const profilesHTML = profiles.map(profile => {
            const isLiked = likedProfileIds.has(profile.id);
            const avatarUrl = profile.avatar_url 
                ? supabase.storage.from('avatars').getPublicUrl(profile.avatar_url).data.publicUrl 
                : './images/default-avatar.png';

            // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            const interests = profile.interests || [];
            const displayedInterests = interests.slice(0, 3);
            const hasMoreInterests = interests.length > 3;

            return `
                <div class="profile-card">
                    <div class="profile-preview">
                        <img src="${avatarUrl}" alt="${profile.name}" class="profile-avatar">
                        <div class="profile-info">
                            <h3 class="profile-name">
                                ${profile.name} <span class="age">${profile.age || '?'}</span>
                            </h3>
                            <div class="profile-location">
                                <i class="fas fa-map-marker-alt"></i>
                                ${profile.city || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
                            </div>
                        </div>
                    </div>
                    <div class="profile-details">
                        <div class="profile-bio">
                            ${profile.about || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏ —â–æ –Ω–µ –¥–æ–¥–∞–≤ –æ–ø–∏—Å'}
                        </div>
                        <div class="profile-interests">
                            ${displayedInterests.map(interest => `
                                <span class="interest-tag">${interest}</span>
                            `).join('')}
                            ${hasMoreInterests ? `
                                <span class="interest-tag">+${interests.length - 3}</span>
                            ` : ''}
                        </div>
                    </div>
                    <div class="profile-actions">
                        <button onclick="showProfileModal('${profile.id}')" class="action-button info-button">
                            <i class="fas fa-info"></i>
                        </button>
                        <button onclick="toggleLike('${profile.id}', event)" class="action-button like-button ${isLiked ? 'liked' : ''}">
                            <i class="fas fa-heart"></i>
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        if (currentPage === 0) {
            container.innerHTML = profilesHTML;
        } else {
            container.insertAdjacentHTML('beforeend', profilesHTML);
        }

        currentPage++;

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤:', error);
        const container = document.getElementById('profilesContainer');
        if (container && currentPage === 0) {
            container.innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                    <p>–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É</p>
                </div>
            `;
        }
    } finally {
        isLoading = false;
        const loader = document.getElementById('profilesLoader');
        if (loader) loader.style.display = 'none';
    }
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–æ–ª—É
function setupInfiniteScroll() {
    window.addEventListener('scroll', () => {
        if (isLoading || !hasMoreProfiles) return;

        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–≥–æ—Ä—Ç–∞–≤ –¥–æ –∫—ñ–Ω—Ü—è
        if (scrollTop + clientHeight >= scrollHeight - 100) {
            loadProfiles();
        }
    });
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º
window.showProfileModal = async (profileId) => {
    try {
        const { data: profile, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', profileId)
            .single();

        if (error) throw error;

        const modalContent = document.getElementById('modalContent');
        modalContent.innerHTML = `
            <div class="modal-profile">
                <div class="modal-gallery">
                    <img src="${profile.avatar_url ? 
                        supabase.storage.from('avatars').getPublicUrl(profile.avatar_url).data.publicUrl 
                        : './images/default-avatar.png'}" 
                        class="modal-main-photo">
                    ${profile.gallery ? `
                        <div class="gallery-grid">
                            ${profile.gallery.map(photo => `
                                <img src="${supabase.storage.from('profiles').getPublicUrl(photo).data.publicUrl}" 
                                     alt="–§–æ—Ç–æ –∑ –≥–∞–ª–µ—Ä–µ—ó" 
                                     class="gallery-item">
                            `).join('')}
                        </div>
                    ` : ''}
                </div>
                <div class="modal-info">
                    <h2>${profile.name || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}, ${profile.age || '?'}</h2>
                    <p class="modal-location"><i class="fas fa-map-marker-alt"></i> ${profile.city || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                    ${profile.bio ? `<p class="modal-bio">${profile.bio}</p>` : ''}
                    ${profile.interests && profile.interests.length > 0 ? `
                        <div class="modal-interests">
                            <h3>–Ü–Ω—Ç–µ—Ä–µ—Å–∏</h3>
                            <div class="interests-grid">
                                ${profile.interests.map(interest => `
                                    <span class="interest-tag">${interest}</span>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;

        document.getElementById('profileModal').style.display = 'block';
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é');
    }
};

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º
window.closeProfileModal = () => {
    document.getElementById('profileModal').style.display = 'none';
};

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
window.onclick = (event) => {
    const modal = document.getElementById('profileModal');
    if (event.target === modal) {
        closeProfileModal();
    }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', initializeFeed);
